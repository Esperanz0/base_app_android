// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
        mavenCentral()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    compileSdkVersion = 23
    buildToolsVersion = "23.0.2"
    applicationId = "base.app.android"
    minSdkVersion = 16
    targetSdkVersion = 23
    versionCode = 100
    versionName = "1.00"

    //Libraries
    daggerVersion = '2.0.2'
    rxJavaVersion = '1.1.0'
    rxAndroidVersion = '1.0.1'
    rxCacheVersion = "1.1.0"
    javaxAnnotationVersion = "10.0-b28"

    supportVersion = '23.2.0'

    retrofitVersion = "2.0.0-beta4"
    lombokVersion = "1.16.6"
    retrolambdaVersion = "3.2.4"
    androidAptVersion = "1.8"
    spoonVersion = "1.0.4"
    spoonScreenshotsVersion = "1.3.1"
    javaAptVersion = "0.5"

    //UI
    picassoVersion = "2.5.2"
    materialishProgressVersion = '1.7'
    materialDialogVersion = '0.8.5.6@aar'
    butterKnifeVersion = '7.0.1'

    //Unit testing
    jUnitVersion = "4.12"
    mockitoVersion = "1.10.19"

    //Integration testing
    supportTestRunnerVersion = "0.4.1"
    supportTestRulesVersion = "0.4.1"
    espressoVersion = "2.2.1"

    domainDependencies = [
            daggerCompiler:     "com.google.dagger:dagger-compiler:${daggerVersion}",
            dagger:             "com.google.dagger:dagger:${daggerVersion}",
            rxJava:             "io.reactivex:rxjava:${rxJavaVersion}",
            javaxAnnotation:    "org.glassfish:javax.annotation:${javaxAnnotationVersion}",
            lombok:             "org.projectlombok:lombok:${lombokVersion}"
    ]

    domainTestDependencies = [
            junit:              "junit:junit:${jUnitVersion}",
            mockito:            "org.mockito:mockito-core:${mockitoVersion}"
    ]

    dataDependencies = [
            daggerCompiler:     "com.google.dagger:dagger-compiler:${daggerVersion}",
            dagger:             "com.google.dagger:dagger:${daggerVersion}",
            rxJava:             "io.reactivex:rxjava:${rxJavaVersion}",
            javaxAnnotation:    "org.glassfish:javax.annotation:${javaxAnnotationVersion}",
            retrofit:           "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitAdapterRxJava:   "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}",
            retrofitConverterGson:   "com.squareup.retrofit2:converter-gson:${retrofitVersion}",
            lombok:             "org.projectlombok:lombok:${lombokVersion}",
            rxCache:            "com.github.VictorAlbertos:RxCache:${rxCacheVersion}"
    ]

    dataTestDependencies = [
            junit:              "junit:junit:${jUnitVersion}",
            mockito:            "org.mockito:mockito-core:${mockitoVersion}"
    ]

    presentationDependencies = [
            daggerCompiler:     "com.google.dagger:dagger-compiler:${daggerVersion}",
            dagger:             "com.google.dagger:dagger:${daggerVersion}",
            rxJava:             "io.reactivex:rxjava:${rxJavaVersion}",
            rxAndroid:          "io.reactivex:rxandroid:${rxAndroidVersion}",
            javaxAnnotation:    "org.glassfish:javax.annotation:${javaxAnnotationVersion}",
            supportAppCompat:   "com.android.support:appcompat-v7:${supportVersion}",
            supportRecyclerview:"com.android.support:recyclerview-v7:${supportVersion}",
            supportDesign:      "com.android.support:design:${supportVersion}",
            picasso:            "com.squareup.picasso:picasso:${picassoVersion}",
            materialishProgress: "com.pnikosis:materialish-progress:${materialishProgressVersion}",
            materialDialog:     "com.github.afollestad.material-dialogs:core:${materialDialogVersion}",
            butterKnife:        "com.jakewharton:butterknife:${butterKnifeVersion}"
    ]

    presentationTestDependencies = [
            supportTestRunner:  "com.android.support.test:runner:${supportTestRunnerVersion}",
            supportTestRules:   "com.android.support.test:rules:${supportTestRulesVersion}",
            espresso:           "com.android.support.test.espresso:espresso-contrib:${espressoVersion}",
            spoonScreenshots:   "com.squareup.spoon:spoon-client:${spoonScreenshotsVersion}"
    ]

    buildScriptDependencies = [
            androidApt:         "com.neenbedankt.gradle.plugins:android-apt:${androidAptVersion}",
            retrolambda:        "me.tatarka:gradle-retrolambda:${retrolambdaVersion}",
            spoon:              "com.stanfy.spoon:spoon-gradle-plugin:${spoonVersion}",
            javaApt:            "net.ltgt.gradle:gradle-apt-plugin:${javaAptVersion}"
    ]
}

task('freshStart') << {
    String startFresh = "start_fresh/"

    String data = "data/src/main/java/data/"
    String dataTest = "data/src/test/java/data/"

    Helper.removeDir(data+"sections/user_demo")
    Helper.removeDir(dataTest+"user_demo")
    Helper.removeDir(dataTest+"net")

    Helper.moveFileDeleting(startFresh+"DataModule", data+"internal/di/", "DataModule.java")
    Helper.moveFileDeleting(startFresh+"RestApi", data+"net/", "RestApi.java")
    Helper.moveFileDeleting(startFresh+"RxProviders", data+"cache/", "RxProviders.java")


    String domain = "domain/src/main/java/domain/"
    Helper.removeDir(domain+"sections/user_demo")
    Helper.removeDir(domain+"sections/dashboard")
    Helper.moveFileDeleting(startFresh+"Wireframe", domain+"sections/", "Wireframe.java")
    Helper.moveFileDeleting(startFresh+"LaunchPresenter", domain+"sections/launch/", "LaunchPresenter.java")

    String domainTest = "domain/src/test/java/domain/"
    Helper.removeDir(domainTest+"sections/user_demo")
    Helper.removeDir(domainTest+"sections/dashboard")


    String presentation = "presentation/src/main/java/presentation/"
    Helper.removeDir(presentation+"sections/user_demo")
    Helper.removeDir(presentation+"sections/dashboard")
    Helper.moveFileDeleting(startFresh+"ApplicationComponent", presentation+"internal/di/", "ApplicationComponent.java")
    Helper.moveFileDeleting(startFresh+"DomainPresentationModule", presentation+"internal/di/", "DomainPresentationModule.java")

    Helper.moveFileDeleting(startFresh+"WireframeDomain", presentation+"sections", "WireframeDomain.java")

    Helper.removeDir("presentation/src/main/res/sections/user_demo")
    Helper.removeDir("presentation/src/main/res/sections/dashboard")
    Helper.removeDir("presentation/src/main/res/drawable-xxxhdpi")

    Helper.moveFileDeleting(startFresh+"AndroidManifest", "presentation/src/main/", "AndroidManifest.xml")
    Helper.moveFileDeleting(startFresh+"strings", "presentation/src/main/res/values/", "strings.xml")
    Helper.moveFileDeleting(startFresh+"styles", "presentation/src/main/res/values/", "styles.xml")
    Helper.moveFileDeleting(startFresh+"build_presentation", "presentation/", "build.gradle")

    String presentationTest = "presentation/src/androidTest/java/presentation/"
    Helper.removeDir(presentationTest+"sections/user_demo")
    Helper.removeDir(presentationTest+"sections/dashboard")
    Helper.moveFileDeleting(startFresh+"SuiteIntegration", presentationTest+"common/", "SuiteIntegration.java")

    Helper.moveFileDeleting(startFresh+"build", ".", "build.gradle")
    Helper.moveFileDeleting(startFresh+"README.md", ".", "README.md")
    Helper.moveFileDeleting(startFresh+"LICENSE", ".", "LICENSE")

    Helper.removeDir(".git")
    Helper.removeDir(startFresh)

    println("Remember clean and build project")
}

class Helper {
    static void removeDir(String path) {
        new File(path).deleteDir()
    }

    static void moveFileDeleting(String source, String destination, String nameNewFile) {
        File fileSrc = new File(source)
        File dir = new File(destination)
        File fileDst = new File(dir, nameNewFile)
        fileDst.delete()
        if (!fileSrc.renameTo(fileDst)) println("Failed to replace " + fileDst.getAbsolutePath())
    }
}
